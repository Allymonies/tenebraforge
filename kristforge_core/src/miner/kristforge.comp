#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : enable

uint32_t rotr(uint32_t x, uint32_t y) {
    return (x << y) | (x >> (32 - y));
}

uint32_t ch(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (~x & z);
}

uint32_t maj(uint32_t x, uint32_t y, uint32_t z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

uint32_t ep0(uint32_t x) {
    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
}

uint32_t ep1(uint32_t x) {
    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
}

uint32_t sig0(uint32_t x) {
    return rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3);
}

uint32_t sig1(uint32_t x) {
    return rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10);
}

#define H0 0x6a09e667
#define H1 0xbb67ae85
#define H2 0x3c6ef372
#define H3 0xa54ff53a
#define H4 0x510e527f
#define H5 0x9b05688c
#define H6 0x1f83d9ab
#define H7 0x5be0cd19

uint32_t K[64] = uint32_t[64](
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
);

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// NOTE: must match rust
layout(set = 0, binding = 0) uniform Inputs {
    // address + prev block
    uint8_t[22] netstate;

    // miner prefix
    uint8_t[2] prefix;

    // current work value
    uint64_t work;
} inputs;

// NOTE: must match rust
layout(set = 0, binding = 1) buffer State {
    // current offset
    uint32_t offset;

    // solution for current target, or 0 for no solution
    uint32_t solution;
} state;

void main() {
    uint32_t id = gl_GlobalInvocationID.x + 1;
    uint64_t nonce = uint64_t(state.offset) << 32 | id;

    // initialize hash input
    // [0..10) = address
    // [10..22) = prev block
    // [22..24) = prefix
    // [24..32) = nonce
    uint8_t[64] text;
    for (int i = 0; i < 22; i++) text[i] = inputs.netstate[i];
    text[22] = inputs.prefix[0];
    text[23] = inputs.prefix[1];
    text[24] = uint8_t(nonce >> 56);
    text[25] = uint8_t(nonce >> 48);
    text[26] = uint8_t(nonce >> 40);
    text[27] = uint8_t(nonce >> 32);
    text[28] = uint8_t(nonce >> 24);
    text[29] = uint8_t(nonce >> 16);
    text[30] = uint8_t(nonce >> 8);
    text[31] = uint8_t(nonce);

    // padding
    text[32] = uint8_t(0x80);
    for (int i = 31; i < 62; i++) text[i] = uint8_t(0);
    text[62] = uint8_t((32 * 8) >> 8);
    text[63] = uint8_t(32 * 8);

    uint32_t a, b, c, d, e, f, g, h, t1, t2, m[64];

    // message extension
    for (int i = 0; i < 16; i++) {
        m[i] =  text[i * 4    ] << 24 |
                text[i * 4 + 1] << 16 |
                text[i * 4 + 2] << 8 |
                text[i * 4 + 3];
    }

    for (int i = 16; i < 64; i++) {
        m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
    }

    a = H0;
    b = H1;
    c = H2;
    d = H3;
    e = H4;
    f = H5;
    g = H6;
    h = H7;

    for (int i = 0; i < 64; i++) {
        t1 = h + ep1(e) + ch(e, f, g) + K[i] + m[i];
        t2 = ep0(a) + maj(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    // only need the first 6 bytes of the hash output
    a += H0;
    b += H1;

    uint64_t score =    ((uint64_t(a) >> 24) & 0xff) << 40 |
                        ((uint64_t(a) >> 16) & 0xff) << 32 |
                        ((uint64_t(a) >>  8) & 0xff) << 24 |
                        ((uint64_t(a)      ) & 0xff) << 16 |
                        ((uint64_t(b) >> 24) & 0xff) << 8  |
                        ((uint64_t(b) >> 16) & 0xff);

    if (score <= inputs.work) {
        // solution found!
        atomicExchange(state.solution, id);
    }
}
